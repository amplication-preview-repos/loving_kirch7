/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Authority as PrismaAuthority,
  Assignment as PrismaAssignment,
} from "@prisma/client";

export class AuthorityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AuthorityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.authority.count(args);
  }

  async authorities(
    args: Prisma.AuthorityFindManyArgs
  ): Promise<PrismaAuthority[]> {
    return this.prisma.authority.findMany(args);
  }
  async authority(
    args: Prisma.AuthorityFindUniqueArgs
  ): Promise<PrismaAuthority | null> {
    return this.prisma.authority.findUnique(args);
  }
  async createAuthority(
    args: Prisma.AuthorityCreateArgs
  ): Promise<PrismaAuthority> {
    return this.prisma.authority.create(args);
  }
  async updateAuthority(
    args: Prisma.AuthorityUpdateArgs
  ): Promise<PrismaAuthority> {
    return this.prisma.authority.update(args);
  }
  async deleteAuthority(
    args: Prisma.AuthorityDeleteArgs
  ): Promise<PrismaAuthority> {
    return this.prisma.authority.delete(args);
  }

  async findAssignments(
    parentId: string,
    args: Prisma.AssignmentFindManyArgs
  ): Promise<PrismaAssignment[]> {
    return this.prisma.authority
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assignments(args);
  }
}
