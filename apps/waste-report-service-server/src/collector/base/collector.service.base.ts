/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Collector as PrismaCollector,
  Assignment as PrismaAssignment,
} from "@prisma/client";

export class CollectorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CollectorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.collector.count(args);
  }

  async collectors(
    args: Prisma.CollectorFindManyArgs
  ): Promise<PrismaCollector[]> {
    return this.prisma.collector.findMany(args);
  }
  async collector(
    args: Prisma.CollectorFindUniqueArgs
  ): Promise<PrismaCollector | null> {
    return this.prisma.collector.findUnique(args);
  }
  async createCollector(
    args: Prisma.CollectorCreateArgs
  ): Promise<PrismaCollector> {
    return this.prisma.collector.create(args);
  }
  async updateCollector(
    args: Prisma.CollectorUpdateArgs
  ): Promise<PrismaCollector> {
    return this.prisma.collector.update(args);
  }
  async deleteCollector(
    args: Prisma.CollectorDeleteArgs
  ): Promise<PrismaCollector> {
    return this.prisma.collector.delete(args);
  }

  async findAssignments(
    parentId: string,
    args: Prisma.AssignmentFindManyArgs
  ): Promise<PrismaAssignment[]> {
    return this.prisma.collector
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assignments(args);
  }
}
