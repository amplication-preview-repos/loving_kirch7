/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Collector } from "./Collector";
import { CollectorCountArgs } from "./CollectorCountArgs";
import { CollectorFindManyArgs } from "./CollectorFindManyArgs";
import { CollectorFindUniqueArgs } from "./CollectorFindUniqueArgs";
import { CreateCollectorArgs } from "./CreateCollectorArgs";
import { UpdateCollectorArgs } from "./UpdateCollectorArgs";
import { DeleteCollectorArgs } from "./DeleteCollectorArgs";
import { AssignmentFindManyArgs } from "../../assignment/base/AssignmentFindManyArgs";
import { Assignment } from "../../assignment/base/Assignment";
import { CollectorService } from "../collector.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Collector)
export class CollectorResolverBase {
  constructor(
    protected readonly service: CollectorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Collector",
    action: "read",
    possession: "any",
  })
  async _collectorsMeta(
    @graphql.Args() args: CollectorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Collector])
  @nestAccessControl.UseRoles({
    resource: "Collector",
    action: "read",
    possession: "any",
  })
  async collectors(
    @graphql.Args() args: CollectorFindManyArgs
  ): Promise<Collector[]> {
    return this.service.collectors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Collector, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Collector",
    action: "read",
    possession: "own",
  })
  async collector(
    @graphql.Args() args: CollectorFindUniqueArgs
  ): Promise<Collector | null> {
    const result = await this.service.collector(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Collector)
  @nestAccessControl.UseRoles({
    resource: "Collector",
    action: "create",
    possession: "any",
  })
  async createCollector(
    @graphql.Args() args: CreateCollectorArgs
  ): Promise<Collector> {
    return await this.service.createCollector({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Collector)
  @nestAccessControl.UseRoles({
    resource: "Collector",
    action: "update",
    possession: "any",
  })
  async updateCollector(
    @graphql.Args() args: UpdateCollectorArgs
  ): Promise<Collector | null> {
    try {
      return await this.service.updateCollector({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Collector)
  @nestAccessControl.UseRoles({
    resource: "Collector",
    action: "delete",
    possession: "any",
  })
  async deleteCollector(
    @graphql.Args() args: DeleteCollectorArgs
  ): Promise<Collector | null> {
    try {
      return await this.service.deleteCollector(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Assignment], { name: "assignments" })
  @nestAccessControl.UseRoles({
    resource: "Assignment",
    action: "read",
    possession: "any",
  })
  async findAssignments(
    @graphql.Parent() parent: Collector,
    @graphql.Args() args: AssignmentFindManyArgs
  ): Promise<Assignment[]> {
    const results = await this.service.findAssignments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
